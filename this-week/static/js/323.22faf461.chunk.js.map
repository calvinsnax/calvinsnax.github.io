{"version":3,"file":"static/js/323.22faf461.chunk.js","mappings":"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","sources":["components/home/HomeHeader.tsx","components/home/HomeSection.tsx","components/home/HomeTitle.tsx","components/common/card/Card.tsx","components/common/card/CardList.tsx","states/geolocationState.ts","components/weather/hooks/useWeather.ts","libs/hooks/useGeolocation.ts","components/weather/WeatherListItem.tsx","components/weather/WeatherList.tsx","pages/HomePage.tsx"],"sourcesContent":["import React from 'react';\nimport { Header, HeaderTitle } from '../common';\n\nconst HomeHeader = () => {\n  return (\n    <Header>\n      <HeaderTitle>THIS WEEK</HeaderTitle>\n    </Header>\n  );\n};\n\nexport default HomeHeader;\n","import React from 'react';\nimport { Box } from '../atom';\n\nexport interface HomeSectionProps {\n  title: string | React.ReactNode;\n  extra?: React.ReactNode | string;\n}\n\ninterface Props extends HomeSectionProps {\n  children: React.ReactNode;\n}\n\nconst HomeSection = (props: Props) => {\n  const { title, children, extra } = props;\n  return (\n    <Box pt=\"2rem\" pb=\"3rem\">\n      <Box\n        display=\"flex\"\n        alignItems=\"center\"\n        px=\"var(--spacing-base)\"\n        mb=\"1.375rem\"\n      >\n        <Box\n          flex={1}\n          fontSize=\"1.25rem\"\n          fontWeight={700}\n          lineHeight={1.4}\n        >\n          {title}\n        </Box>\n\n        {extra}\n      </Box>\n\n      {children}\n    </Box>\n  );\n};\n\nHomeSection.defaultProps = {\n  extra: '',\n};\n\nexport default HomeSection;\n","import React from 'react';\nimport { Container, Text } from '~/components/atom';\nimport { Headline } from '~/components/common';\n\nconst HomeTitle = () => {\n  return (\n    <Container as=\"section\" mb=\"2rem\">\n      <Headline mb=\"0.5rem\">THIS WEEK</Headline>\n      <Text as=\"p\" color=\"var(--color-grey-600)\" fontSize={2}>\n        신나는 일주일을 계획합시다!\n      </Text>\n    </Container>\n  );\n};\n\nexport default HomeTitle;\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface CardProps {\n  children: React.ReactNode;\n}\n\nexport const Card = (props: CardProps) => {\n  const { children } = props;\n\n  return (\n    <li>\n      <CardArticle>{children}</CardArticle>\n    </li>\n  );\n};\n\nconst CardArticle = styled.article`\n  padding: 1rem;\n  background-color: var(--color-grey-100);\n  border-radius: 12px;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { carouselUl } from '~/libs/styles';\n\ninterface CardListProps {\n  children: React.ReactNode;\n}\n\nexport const CardList = (props: CardListProps) => {\n  const { children } = props;\n  return <StyledCardList>{children}</StyledCardList>;\n};\n\nconst StyledCardList = styled.ul`\n  ${carouselUl}\n\n  list-style: none;\n  padding: 0;\n  margin: 0;\n\n  display: flex;\n  align-items: stretch;\n  padding-left: var(--spacing-base);\n  scroll-padding-left: var(--spacing-base);\n\n  & > li {\n    scroll-snap-align: start;\n    flex: 0 0 auto;\n    width: calc(30% - var(--spacing-base));\n\n    &:not(:last-child) {\n      margin-right: 0.75rem;\n    }\n    &:last-child {\n      margin-right: var(--spacing-base);\n    }\n  }\n`;\n","import { atom } from 'recoil';\n\nexport const geolocationIsDeniedState = atom<boolean>({\n  key: 'geolocationIsDeniedState',\n  default: false,\n});\n","/**\n * External imports\n */\nimport { useMemo } from 'react';\nimport { useQuery } from 'react-query';\nimport queryString from 'query-string';\nimport axios from 'axios';\n\n/**\n * Internal imports\n */\nimport { useGeolocation } from '~/libs/hooks';\nimport { useToast } from '~/components/common';\n\nconst appId = 'c59ada2d7a63bb6e24deee7e56c81bac';\n\nexport interface WeatherType {\n  dt: number;\n  temp: number | { day: number };\n  uvi: 10;\n  weather: {\n    description: string;\n    icon: string;\n    id: number;\n    main: string;\n  }[];\n}\n\nexport const useWeather = () => {\n  const { currentPosition } = useGeolocation();\n  const { appendToast } = useToast();\n\n  const apiPath = useMemo(() => {\n    const lat = currentPosition?.coords.latitude ?? 37.4799966;\n    const lon = currentPosition?.coords.longitude ?? 126.9022916;\n    const path = 'https://api.openweathermap.org/data/2.5/onecall';\n\n    const search = queryString.stringify({\n      appid: appId,\n      lat,\n      lon,\n      lang: 'kr',\n      exclude: 'hourly,minutely,current', // 시간/분 단위 리스트 제외\n      units: 'metric', // 온도를 섭씨로 설정\n    });\n    return `${path}?${search}`;\n  }, [\n    currentPosition?.coords.latitude,\n    currentPosition?.coords.longitude,\n  ]);\n\n  const fetchWeather = async () => {\n    try {\n      const { data } = await axios.get(apiPath);\n\n      return data.daily;\n    } catch (e) {\n      appendToast({\n        type: 'error',\n        message: '날씨 정보를 불러오지 못했어요',\n      });\n    }\n  };\n\n  const { data, isFetching } = useQuery<WeatherType[]>(\n    [\n      'getWeathers',\n      currentPosition?.coords.latitude,\n      currentPosition?.coords.longitude,\n    ],\n    fetchWeather,\n  );\n\n  return {\n    weathers: data,\n    isFetching,\n  };\n};\n","import { useEffect, useState } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { useToast } from '~/components/common';\nimport { geolocationIsDeniedState } from '~/states/geolocationState';\n\nexport const useGeolocation = () => {\n  const [currentPosition, setCurrentPosition] =\n    useState<GeolocationPosition | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDenied, setIsDenied] = useRecoilState(\n    geolocationIsDeniedState,\n  );\n  const { appendToast } = useToast();\n\n  const handleSuccess: PositionCallback = (position) => {\n    setCurrentPosition(position);\n    setIsLoading(false);\n    setIsDenied(false);\n  };\n\n  const handleError: PositionErrorCallback = (positionError) => {\n    if (isDenied) return;\n\n    appendToast({\n      type: 'error',\n      message:\n        '위치 정보 수집을 허용하면 더 정확한 날씨를 볼 수 있어요',\n    });\n    setIsDenied(true);\n  };\n\n  const fetchCurrentPosition = () => {\n    if ('geolocation' in navigator) {\n      setIsLoading(true);\n\n      navigator.geolocation.getCurrentPosition(\n        handleSuccess,\n        handleError,\n      );\n    } else {\n      setIsLoading(false);\n      appendToast({\n        type: 'error',\n        message: '당신의 위치를 찾지 못했어요',\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (currentPosition) return;\n    fetchCurrentPosition();\n  }, []);\n\n  return {\n    isLoading,\n    currentPosition,\n    fetchCurrentPosition,\n  };\n};\n","/**\n * External imports\n */\nimport React, { useMemo } from 'react';\nimport {\n  RiCloudyFill,\n  RiFoggyFill,\n  RiHeavyShowersFill,\n  RiMistFill,\n  RiShowersFill,\n  RiSnowyFill,\n  RiSunCloudyFill,\n  RiSunFill,\n  RiThunderstormsFill,\n} from 'react-icons/ri';\nimport dayjs from 'dayjs';\n\n/**\n * Internal imports\n */\nimport { Box } from '../atom';\nimport { Card } from '../common/card';\nimport { WeatherType } from './hooks/useWeather';\n\nexport const weatherIcons = [\n  {\n    alias: '01d',\n    icon: <RiSunFill color=\"orange\" />,\n    emoji: '☀️',\n  },\n  {\n    alias: '02d',\n    icon: <RiSunCloudyFill color=\"#4dabf7\" />,\n    emoji: '☁️',\n  },\n  {\n    alias: '03d',\n    icon: <RiCloudyFill color=\"#4dabf7\" />,\n    emoji: '☁️',\n  },\n  {\n    alias: '04d',\n    icon: <RiFoggyFill color=\"#15aabf\" />,\n    emoji: '🌁',\n  },\n  {\n    alias: '09d',\n    icon: <RiHeavyShowersFill color=\"#495057\" />,\n    emoji: '🌧️',\n  },\n  {\n    alias: '10d',\n    icon: <RiShowersFill color=\"#adb5bd\" />,\n    emoji: '🌧️',\n  },\n  {\n    alias: '11d',\n    icon: <RiThunderstormsFill color=\"#fcc419\" />,\n    emoji: '🌩️',\n  },\n  {\n    alias: '13d',\n    icon: <RiSnowyFill color=\"#74c0fc\" />,\n    emoji: '❄️',\n  },\n  {\n    alias: '50d',\n    icon: <RiMistFill color=\"#868e96\" />,\n    emoji: '🌫️',\n  },\n];\n\ntype WeatherListItemProps = WeatherType;\n\nexport const WeatherListItem = (props: WeatherListItemProps) => {\n  const { dt, weather, temp } = props;\n\n  /**\n   * referenced: https://openweathermap.org/weather-conditions#How-to-get-icon-URL\n   */\n\n  const weatherIcon = useMemo(() => {\n    if (weather.length === 0) return null;\n    const latestWeatherIconAlias = weather[0].icon;\n    const matchedWeatherIconData = weatherIcons.find(\n      (e) => e.alias === latestWeatherIconAlias.replace('n', 'd'),\n    );\n\n    if (!matchedWeatherIconData) return null;\n    return matchedWeatherIconData.icon;\n  }, [weather]);\n\n  return (\n    <Card>\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        alignItems=\"center\"\n        py={1}\n      >\n        <Box mb={3} fontWeight={500} fontSize={2}>\n          {dayjs.unix(dt).tz('Asia/Seoul').format('M/D(dd)')}\n        </Box>\n\n        {weather.length > 0 ? (\n          <>\n            <Box mb={2} fontSize={5}>\n              {weatherIcon}\n            </Box>\n\n            {/* <Box mb={3} color=\"var(--color-grey-600)\" fontSize={1}>\n              ({weather[0].description})\n            </Box> */}\n          </>\n        ) : null}\n\n        <Box fontSize=\"1.375rem\" fontWeight={500}>\n          {Math.floor(typeof temp === 'number' ? temp : temp.day)}º\n        </Box>\n      </Box>\n    </Card>\n  );\n};\n","/**\n * External imports\n */\nimport React from 'react';\nimport { TailSpin } from 'react-loading-icons';\n\n/**\n * Internal imports\n */\nimport { CardList } from '../common/card';\nimport { Section } from '../common/section/Section';\nimport { useWeather } from './hooks/useWeather';\nimport { WeatherListItem } from './WeatherListItem';\n\nexport const WeatherList = () => {\n  const { weathers, isFetching } = useWeather();\n  // const weathers: WeatherType[] = [];\n  // const isFetching = false;\n\n  return (\n    <Section\n      title=\"이번주 날씨\"\n      extra={\n        isFetching ? (\n          <TailSpin height=\"1.5rem\" stroke=\"var(--color-primary-400)\" />\n        ) : null\n      }\n    >\n      <CardList>\n        {weathers?.map((item) => {\n          return <WeatherListItem key={item.dt} {...item} />;\n        })}\n      </CardList>\n    </Section>\n  );\n};\n","import React from 'react';\nimport { HomeHeader, HomeTitle } from '~/components/home';\nimport { TodoList } from '~/components/todo/TodoList';\nimport { WeatherList } from '~/components/weather';\n\nconst Homepage = () => {\n  return (\n    <>\n      <HomeHeader />\n      <HomeTitle />\n      <WeatherList />\n      <TodoList />\n    </>\n  );\n};\n\nexport default Homepage;\n"],"names":["HomeSection","props","title","children","extra","pt","pb","display","alignItems","px","mb","flex","fontSize","fontWeight","lineHeight","defaultProps","as","color","Card","CardArticle","styled","CardList","StyledCardList","carouselUl","geolocationIsDeniedState","atom","key","default","useWeather","useState","currentPosition","setCurrentPosition","isLoading","setIsLoading","useRecoilState","isDenied","setIsDenied","appendToast","useToast","handleSuccess","position","handleError","positionError","type","message","fetchCurrentPosition","navigator","geolocation","getCurrentPosition","useEffect","useGeolocation","apiPath","useMemo","lat","coords","latitude","lon","longitude","search","queryString","appid","lang","exclude","units","fetchWeather","axios","data","daily","useQuery","weathers","isFetching","weatherIcons","alias","icon","emoji","WeatherListItem","dt","weather","temp","weatherIcon","length","latestWeatherIconAlias","matchedWeatherIconData","find","e","replace","flexDirection","py","dayjs","tz","format","Math","floor","day","WeatherList","Section","height","stroke","map","item","TodoList"],"sourceRoot":""}