{"version":3,"file":"static/js/359.328a305f.chunk.js","mappings":"kSAyBaA,EAAW,SAACC,GACvB,IAAQC,EAAuCD,EAAvCC,aAAcC,EAAyBF,EAAzBE,WAAYC,EAAaH,EAAbG,SAQlC,GAAwBC,EAAAA,EAAAA,WAAQ,kBANR,CACtBC,MAAO,GACPC,QAAS,GACTC,QAAS,GACTC,aAAa,IAIVP,IAFL,eAAOQ,EAAP,KAAaC,EAAb,KAKMC,GAAmBC,EAAAA,EAAAA,UAAQ,WAC/B,OAAKH,EAAKJ,QAAUI,EAAKH,UAExB,CAACG,EAAKJ,MAAOI,EAAKH,UAEfO,EAAoB,SACxBC,EACAC,GAEAL,GAAQ,SAACM,GACP,OAAO,kBACFA,GADL,cAEGF,EAAMC,QAUb,OACE,SAAC,KAAD,WACE,kBAAMZ,SAP8C,SAACc,GACvDA,EAAEC,iBACFf,EAASM,EAAMQ,IAKb,WACE,SAAC,KAAD,CACEE,OAAK,EACLC,UAAQ,EACRC,MAAM,eACNC,YAAY,4BACZC,KAAK,QACLR,MAAON,EAAKJ,MACZmB,SAAU,SAACP,GAAD,OAAOJ,EAAkB,QAASI,EAAEQ,OAAOV,WAGvD,SAAC,KAAD,CACEI,OAAK,EACLC,UAAQ,EACRC,MAAM,eACNC,YAAY,0DACZI,KAAK,WACLH,KAAK,UACLR,MAAON,EAAKH,QACZkB,SAAU,SAACP,GAAD,OAAOJ,EAAkB,UAAWI,EAAEQ,OAAOV,WAGzD,SAAC,KAAD,CACEI,OAAK,EACLE,MAAM,eACNM,KAAK,OACLJ,KAAK,UACLR,MAAON,EAAKF,QACZiB,SAAU,SAACP,GAAD,OAAOJ,EAAkB,UAAWI,EAAEQ,OAAOV,WAGzD,SAAC,KAAD,CACEY,KAAK,SACLC,MAAM,UACNC,SAAUlB,EAHZ,gBAKGT,QALH,IAKGA,EAAAA,EAAc,uBAOzBH,EAAS+B,aAAe,CACtB7B,aAAc,KACdC,WAAY,ICpGP,IAAM6B,EAAa,SAAC/B,GACzB,IAAQ2B,EAAS3B,EAAT2B,KAEFK,GAAUpB,EAAAA,EAAAA,UAAQ,WACtB,IACMP,EAAiB,WAATsB,EAAoB,eAAO,eAEzC,MAAM,GAAN,OAHe,gBAGf,YAAoBtB,KACnB,CAACsB,IAEJ,OACE,iCACE,UAAC,KAAD,YACE,SAAC,KAAD,KACA,SAAC,KAAD,UAAcK,QAGhB,SAAC,KAAD,WACE,SAAC,KAAD,UAAWA,U,4FCgBnB,UAhCuB,WAIrB,IAAQC,GAAWC,EAAAA,EAAAA,MAAXD,OACR,GAAqCE,EAAAA,EAAAA,MAA7BC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WAChBC,GAAWC,EAAAA,EAAAA,MAEXC,GAAW5B,EAAAA,EAAAA,UAAQ,WACvB,OAAKqB,EACEG,EAAaH,GADA,OAEnB,CAACA,IAEEQ,EAAY,kBAAMH,EAAS,MAOjC,OACE,iCACE,SAAC,KAAD,CAAYX,KAAK,YACjB,SAAC,KAAD,CACE1B,aAAcuC,EACdtC,WAAW,eACXC,SAXsC,SAACM,GACtCwB,GACLI,EAAWJ,EAAQxB,EAAMgC","sources":["components/todo/TodoForm.tsx","components/todo/TodoHeader.tsx","pages/todo/TodoModifyPage.tsx"],"sourcesContent":["import React, {\n  FormEvent,\n  FormEventHandler,\n  useMemo,\n  useState,\n} from 'react';\n\nimport type { Todo } from '~/models';\n\nimport { Container } from '~/components/atom';\nimport { FloatingCTA, TextInput } from '~/components/common';\n\ntype FormType = Omit<Todo, 'id'>;\n\nexport type TodoFormSubmitHandler = (\n  formData: FormType,\n  e: FormEvent<HTMLFormElement>,\n) => void;\n\ninterface TodoFormProps {\n  defaultValue?: Partial<FormType> | null;\n  submitText?: string;\n  onSubmit: TodoFormSubmitHandler;\n}\n\nexport const TodoForm = (props: TodoFormProps) => {\n  const { defaultValue, submitText, onSubmit } = props;\n\n  const initialFormData = {\n    title: '',\n    content: '',\n    dueDate: '',\n    isCompleted: false,\n  };\n  const [form, setForm] = useState<FormType>({\n    ...initialFormData,\n    ...defaultValue,\n  });\n\n  const isSubmitDisabled = useMemo(() => {\n    if (!form.title || !form.content) return true;\n    return false;\n  }, [form.title, form.content]);\n\n  const handleChangeField = (\n    key: keyof FormType,\n    value: FormType[keyof FormType],\n  ) => {\n    setForm((prev) => {\n      return {\n        ...prev,\n        [key]: value,\n      };\n    });\n  };\n\n  const handleSubmit: FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault();\n    onSubmit(form, e);\n  };\n\n  return (\n    <Container>\n      <form onSubmit={handleSubmit}>\n        <TextInput\n          block\n          required\n          label=\"제목\"\n          placeholder=\"제목 입력\"\n          name=\"title\"\n          value={form.title}\n          onChange={(e) => handleChangeField('title', e.target.value)}\n        />\n\n        <TextInput\n          block\n          required\n          label=\"내용\"\n          placeholder=\"내용을 입력해주세요\"\n          mode=\"textarea\"\n          name=\"content\"\n          value={form.content}\n          onChange={(e) => handleChangeField('content', e.target.value)}\n        />\n\n        <TextInput\n          block\n          label=\"기한\"\n          type=\"date\"\n          name=\"dueDate\"\n          value={form.dueDate}\n          onChange={(e) => handleChangeField('dueDate', e.target.value)}\n        />\n\n        <FloatingCTA\n          type=\"submit\"\n          color=\"primary\"\n          disabled={isSubmitDisabled}\n        >\n          {submitText ?? '완료'}\n        </FloatingCTA>\n      </form>\n    </Container>\n  );\n};\n\nTodoForm.defaultProps = {\n  defaultValue: null,\n  submitText: '',\n};\n","import React, { useMemo } from 'react';\nimport { Container } from '../atom';\nimport { Header, HeaderBack, HeaderTitle, Headline } from '../common';\n\ninterface TodoHeaderProps {\n  type: 'create' | 'modify';\n}\n\nexport const TodoHeader = (props: TodoHeaderProps) => {\n  const { type } = props;\n\n  const heading = useMemo(() => {\n    const prefix = '할 일';\n    const title = type === 'create' ? '추가' : '수정';\n\n    return `${prefix} ${title}`;\n  }, [type]);\n\n  return (\n    <>\n      <Header>\n        <HeaderBack />\n        <HeaderTitle>{heading}</HeaderTitle>\n      </Header>\n\n      <Container>\n        <Headline>{heading}</Headline>\n      </Container>\n    </>\n  );\n};\n","import React, { useMemo } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport {\n  TodoForm,\n  TodoFormSubmitHandler,\n  TodoHeader,\n  useTodo,\n} from '~/components/todo';\n\nconst TodoModifyPage = () => {\n  type Params = {\n    todoId: string;\n  };\n  const { todoId } = useParams<Params>();\n  const { findTodoById, modifyTodo } = useTodo();\n  const navigate = useNavigate();\n\n  const todoData = useMemo(() => {\n    if (!todoId) return null;\n    return findTodoById(todoId);\n  }, [todoId]);\n\n  const onSuccess = () => navigate('/');\n\n  const handleSubmit: TodoFormSubmitHandler = (form) => {\n    if (!todoId) return;\n    modifyTodo(todoId, form, onSuccess);\n  };\n\n  return (\n    <>\n      <TodoHeader type=\"modify\" />\n      <TodoForm\n        defaultValue={todoData}\n        submitText=\"저장\"\n        onSubmit={handleSubmit}\n      />\n    </>\n  );\n};\n\nexport default TodoModifyPage;\n"],"names":["TodoForm","props","defaultValue","submitText","onSubmit","useState","title","content","dueDate","isCompleted","form","setForm","isSubmitDisabled","useMemo","handleChangeField","key","value","prev","e","preventDefault","block","required","label","placeholder","name","onChange","target","mode","type","color","disabled","defaultProps","TodoHeader","heading","todoId","useParams","useTodo","findTodoById","modifyTodo","navigate","useNavigate","todoData","onSuccess"],"sourceRoot":""}